training_mee = training_mee + mean_euclidean_error(p1_tot_training, train_output_1_cup[-sl_cup_1$validRows[j][[1]]],
p2_tot_training, train_output_2_cup[-sl_cup_2$validRows[j][[1]]])
}
training_mee/sl_cup_1$cvControl$V
#restituisco la media del MEE
return(training_mee/sl_cup_1$cvControl$V)
}
# MEE sul training set
training_mean_euclidean_error_v2(sl_cup_1,sl_cup_2)
### calcoliamo il MEE del training e della validation per la cross validation del SL
### training MEE
training_mean_euclidean_error_v2 = function(sl_cup_1,sl_cup_2){
training_mee = 0 # vettore in cui salvo i MEE calcolati in ogni fold
coef_1 = unname(sl_cup_1$coef) # prendo il vettori dei pesi del SL1
#name_1 = names(sl_cup_1$coef) # salvo il nome dei modelli, non lo uso
#name_1 = name_1[coef_1!=0] # salvo il nome dei modelli con peso non nullo, non lo uso
coef_2 = unname(sl_cup_2$coef) # prendo il vettori dei pesi del SL2
for(j in 1:length(sl_cup_1$cvFitLibrary)) { #stesso valore di sl_cup_2$cvFitLibrary
# calcolo le predizioni del training set dei modelli con pesi non nulli del SL1
p1_training = replicate(length(sl_cup_1$cvFitLibrary[[j]]), 0)
for (i in 1:length(sl_cup_1$cvFitLibrary[[j]])) {
if (coef_1[i] > 0) {
p1_training[i] = predict(sl_cup_1$cvFitLibrary[[j]][[i]], train_input_cup[-sl_cup_1$validRows[j][[1]],], family = sl_cup_1$family)
}
print(length(p1_training))
}
# calcolo predizioni SL1
p1_tot_training = c()
for(i in length(p1_training)) {
p1_tot_training = p1_tot_training + p1_training[i] * coef_1[i]
}
# calcolo le predizioni del training set dei modelli con pesi non nulli del SL2
p2_training = replicate(length(sl_cup_2$cvFitLibrary[[j]]), 0)
for (i in 1:length(sl_cup_2$cvFitLibrary[[j]])) {
if (coef_2[i] > 0) {
p2_training[i] = predict(sl_cup_1$cvFitLibrary[[j]][[i]], train_input_cup[-sl_cup_2$validRows[j][[1]],], family = sl_cup_2$family)
}
}
# calcolo predizioni SL2
p2_tot_training = c()
for(i in length(p1_training)) {
p2_tot_training = p2_tot_training + p2_training[i] * coef_2[i]
}
# calcolo MEE per il primo fold e aggiungo il valore al vettore dei MEE
training_mee = training_mee + mean_euclidean_error(p1_tot_training, train_output_1_cup[-sl_cup_1$validRows[j][[1]]],
p2_tot_training, train_output_2_cup[-sl_cup_2$validRows[j][[1]]])
}
training_mee/sl_cup_1$cvControl$V
#restituisco la media del MEE
return(training_mee/sl_cup_1$cvControl$V)
}
# MEE sul training set
training_mean_euclidean_error_v2(sl_cup_1,sl_cup_2)
### calcoliamo il MEE del training e della validation per la cross validation del SL
### training MEE
training_mean_euclidean_error_v2 = function(sl_cup_1,sl_cup_2){
training_mee = 0 # vettore in cui salvo i MEE calcolati in ogni fold
coef_1 = unname(sl_cup_1$coef) # prendo il vettori dei pesi del SL1
#name_1 = names(sl_cup_1$coef) # salvo il nome dei modelli, non lo uso
#name_1 = name_1[coef_1!=0] # salvo il nome dei modelli con peso non nullo, non lo uso
coef_2 = unname(sl_cup_2$coef) # prendo il vettori dei pesi del SL2
for(j in 1:length(sl_cup_1$cvFitLibrary)) { #stesso valore di sl_cup_2$cvFitLibrary
# calcolo le predizioni del training set dei modelli con pesi non nulli del SL1
p1_training = replicate(length(sl_cup_1$cvFitLibrary[[j]]), 0)
for (i in 1:length(sl_cup_1$cvFitLibrary[[j]])) {
if (coef_1[i] > 0) {
p1_training[i] = predict(sl_cup_1$cvFitLibrary[[j]][[i]], train_input_cup[-sl_cup_1$validRows[j][[1]],], family = sl_cup_1$family)
}
print(p1_training)
}
# calcolo predizioni SL1
p1_tot_training = c()
for(i in length(p1_training)) {
p1_tot_training = p1_tot_training + p1_training[i] * coef_1[i]
}
# calcolo le predizioni del training set dei modelli con pesi non nulli del SL2
p2_training = replicate(length(sl_cup_2$cvFitLibrary[[j]]), 0)
for (i in 1:length(sl_cup_2$cvFitLibrary[[j]])) {
if (coef_2[i] > 0) {
p2_training[i] = predict(sl_cup_1$cvFitLibrary[[j]][[i]], train_input_cup[-sl_cup_2$validRows[j][[1]],], family = sl_cup_2$family)
}
}
# calcolo predizioni SL2
p2_tot_training = c()
for(i in length(p1_training)) {
p2_tot_training = p2_tot_training + p2_training[i] * coef_2[i]
}
# calcolo MEE per il primo fold e aggiungo il valore al vettore dei MEE
training_mee = training_mee + mean_euclidean_error(p1_tot_training, train_output_1_cup[-sl_cup_1$validRows[j][[1]]],
p2_tot_training, train_output_2_cup[-sl_cup_2$validRows[j][[1]]])
}
training_mee/sl_cup_1$cvControl$V
#restituisco la media del MEE
return(training_mee/sl_cup_1$cvControl$V)
}
# MEE sul training set
training_mean_euclidean_error_v2(sl_cup_1,sl_cup_2)
### calcoliamo il MEE del training e della validation per la cross validation del SL
### training MEE
training_mean_euclidean_error_v2 = function(sl_cup_1,sl_cup_2){
training_mee = 0 # vettore in cui salvo i MEE calcolati in ogni fold
coef_1 = unname(sl_cup_1$coef) # prendo il vettori dei pesi del SL1
#name_1 = names(sl_cup_1$coef) # salvo il nome dei modelli, non lo uso
#name_1 = name_1[coef_1!=0] # salvo il nome dei modelli con peso non nullo, non lo uso
coef_2 = unname(sl_cup_2$coef) # prendo il vettori dei pesi del SL2
for(j in 1:length(sl_cup_1$cvFitLibrary)) { #stesso valore di sl_cup_2$cvFitLibrary
# calcolo le predizioni del training set dei modelli con pesi non nulli del SL1
p1_training = replicate(length(sl_cup_1$cvFitLibrary[[j]]), 0)
for (i in 1:length(sl_cup_1$cvFitLibrary[[j]])) {
if (coef_1[i] > 0) {
p1_training[i] = predict(sl_cup_1$cvFitLibrary[[j]][[i]], train_input_cup[-sl_cup_1$validRows[j][[1]],], family = sl_cup_1$family)
}
}
print(p1_training)
# calcolo predizioni SL1
p1_tot_training = c()
for(i in length(p1_training)) {
p1_tot_training = p1_tot_training + p1_training[i] * coef_1[i]
}
# calcolo le predizioni del training set dei modelli con pesi non nulli del SL2
p2_training = replicate(length(sl_cup_2$cvFitLibrary[[j]]), 0)
for (i in 1:length(sl_cup_2$cvFitLibrary[[j]])) {
if (coef_2[i] > 0) {
p2_training[i] = predict(sl_cup_1$cvFitLibrary[[j]][[i]], train_input_cup[-sl_cup_2$validRows[j][[1]],], family = sl_cup_2$family)
}
}
# calcolo predizioni SL2
p2_tot_training = c()
for(i in length(p1_training)) {
p2_tot_training = p2_tot_training + p2_training[i] * coef_2[i]
}
# calcolo MEE per il primo fold e aggiungo il valore al vettore dei MEE
training_mee = training_mee + mean_euclidean_error(p1_tot_training, train_output_1_cup[-sl_cup_1$validRows[j][[1]]],
p2_tot_training, train_output_2_cup[-sl_cup_2$validRows[j][[1]]])
}
training_mee/sl_cup_1$cvControl$V
#restituisco la media del MEE
return(training_mee/sl_cup_1$cvControl$V)
}
# MEE sul training set
training_mean_euclidean_error_v2(sl_cup_1,sl_cup_2)
length(train_output_1_cup[-sl_cup_1$validRows[j][[1]]])
length(train_output_1_cup[-sl_cup_1$validRows[2][[1]]])
length(predict(sl_cup_1$cvFitLibrary[[2]][[2]], train_input_cup[-sl_cup_1$validRows[2][[1]],],
family = sl_cup_1$family))
coef_1[1]
coef_1[2]
coef_1[3]
coef_1[3]
length(sl_cup_1$cvFitLibrary[[2]])
length(sl_cup_1$cvFitLibrary)
for (i in 1:length(sl_cup_1$cvFitLibrary[[j]])) {
if (coef_1[i] > 0) {
p1_tot_training = p1_tot_training +
predict(sl_cup_1$cvFitLibrary[[j]][[i]], train_input_cup[-sl_cup_1$validRows[j][[1]],],
family = sl_cup_1$family) * coef_1[i]
}
}
j = 2
for (i in 1:length(sl_cup_1$cvFitLibrary[[j]])) {
if (coef_1[i] > 0) {
p1_tot_training = p1_tot_training +
predict(sl_cup_1$cvFitLibrary[[j]][[i]], train_input_cup[-sl_cup_1$validRows[j][[1]],],
family = sl_cup_1$family) * coef_1[i]
}
}
p1_tot_training = replicate(length(train_output_1_cup[-sl_cup_1$validRows[j][[1]]]), 0)
for (i in 1:length(sl_cup_1$cvFitLibrary[[j]])) {
if (coef_1[i] > 0) {
p1_tot_training = p1_tot_training +
predict(sl_cup_1$cvFitLibrary[[j]][[i]], train_input_cup[-sl_cup_1$validRows[j][[1]],],
family = sl_cup_1$family) * coef_1[i]
}
}
p1_tot_training
length(p1_tot_training)
p1_tot_training = replicate(length(train_output_1_cup[-sl_cup_1$validRows[j][[1]]]), 0)
length(p1_tot_training)
for (i in 1:length(sl_cup_1$cvFitLibrary[[j]])) {
if (coef_1[i] > 0) {
p1_tot_training = p1_tot_training +
predict(sl_cup_1$cvFitLibrary[[j]][[i]], train_input_cup[-sl_cup_1$validRows[j][[1]],],
family = sl_cup_1$family) * coef_1[i]
}
}
length(p1_tot_training)
p1_tot_training
### calcoliamo il MEE del training e della validation per la cross validation del SL
### training MEE
training_mean_euclidean_error_v2 = function(sl_cup_1,sl_cup_2){
training_mee = 0 # vettore in cui salvo i MEE calcolati in ogni fold
coef_1 = unname(sl_cup_1$coef) # prendo il vettori dei pesi del SL1
#name_1 = names(sl_cup_1$coef) # salvo il nome dei modelli, non lo uso
#name_1 = name_1[coef_1!=0] # salvo il nome dei modelli con peso non nullo, non lo uso
coef_2 = unname(sl_cup_2$coef) # prendo il vettori dei pesi del SL2
for(j in 1:length(sl_cup_1$cvFitLibrary)) { #stesso valore di sl_cup_2$cvFitLibrary
# calcolo le predizioni del training set dei modelli con pesi non nulli del SL1
p1_tot_training = replicate(length(train_output_1_cup[-sl_cup_1$validRows[j][[1]]]), 0)
for (i in 1:length(sl_cup_1$cvFitLibrary[[j]])) {
if (coef_1[i] > 0) {
p1_tot_training = p1_tot_training +
predict(sl_cup_1$cvFitLibrary[[j]][[i]], train_input_cup[-sl_cup_1$validRows[j][[1]],],
family = sl_cup_1$family) * coef_1[i]
}
}
# calcolo le predizioni del training set dei modelli con pesi non nulli del SL2
p2_tot_training = replicate(length(train_output_1_cup[-sl_cup_2$validRows[j][[1]]]), 0)
for (i in 1:length(sl_cup_2$cvFitLibrary[[j]])) {
if (coef_2[i] > 0) {
p1_tot_training = p1_tot_training +
predict(sl_cup_2$cvFitLibrary[[j]][[i]], train_input_cup[-sl_cup_2$validRows[j][[1]],],
family = sl_cup_2$family) * coef_2[i]
}
}
# calcolo MEE per il primo fold e aggiungo il valore al vettore dei MEE
training_mee = training_mee + mean_euclidean_error(p1_tot_training, train_output_1_cup[-sl_cup_1$validRows[j][[1]]],
p2_tot_training, train_output_2_cup[-sl_cup_2$validRows[j][[1]]])
}
training_mee/sl_cup_1$cvControl$V
#restituisco la media del MEE
return(training_mee/sl_cup_1$cvControl$V)
}
# MEE sul training set
training_mean_euclidean_error_v2(sl_cup_1,sl_cup_2)
View(ranger_500_6)
training_mee
for(j in 1:length(sl_cup_1$cvFitLibrary)) { #stesso valore di sl_cup_2$cvFitLibrary
# calcolo le predizioni del training set dei modelli con pesi non nulli del SL1
p1_tot_training = replicate(length(train_output_1_cup[-sl_cup_1$validRows[j][[1]]]), 0)
for (i in 1:length(sl_cup_1$cvFitLibrary[[j]])) {
if (coef_1[i] > 0) {
p1_tot_training = p1_tot_training +
predict(sl_cup_1$cvFitLibrary[[j]][[i]], train_input_cup[-sl_cup_1$validRows[j][[1]],],
family = sl_cup_1$family) * coef_1[i]
}
}
# calcolo le predizioni del training set dei modelli con pesi non nulli del SL2
p2_tot_training = replicate(length(train_output_1_cup[-sl_cup_2$validRows[j][[1]]]), 0)
for (i in 1:length(sl_cup_2$cvFitLibrary[[j]])) {
if (coef_2[i] > 0) {
p1_tot_training = p1_tot_training +
predict(sl_cup_2$cvFitLibrary[[j]][[i]], train_input_cup[-sl_cup_2$validRows[j][[1]],],
family = sl_cup_2$family) * coef_2[i]
}
}
# calcolo MEE per il primo fold e aggiungo il valore al vettore dei MEE
training_mee = training_mee + mean_euclidean_error(p1_tot_training, train_output_1_cup[-sl_cup_1$validRows[j][[1]]],
p2_tot_training, train_output_2_cup[-sl_cup_2$validRows[j][[1]]])
}
coef_1 = unname(sl_cup_1$coef) # prendo il vettori dei pesi del SL1
#name_1 = names(sl_cup_1$coef) # salvo il nome dei modelli, non lo uso
#name_1 = name_1[coef_1!=0] # salvo il nome dei modelli con peso non nullo, non lo uso
coef_2 = unname(sl_cup_2$coef) # prendo il vettori dei pesi del SL2
for(j in 1:length(sl_cup_1$cvFitLibrary)) { #stesso valore di sl_cup_2$cvFitLibrary
# calcolo le predizioni del training set dei modelli con pesi non nulli del SL1
p1_tot_training = replicate(length(train_output_1_cup[-sl_cup_1$validRows[j][[1]]]), 0)
for (i in 1:length(sl_cup_1$cvFitLibrary[[j]])) {
if (coef_1[i] > 0) {
p1_tot_training = p1_tot_training +
predict(sl_cup_1$cvFitLibrary[[j]][[i]], train_input_cup[-sl_cup_1$validRows[j][[1]],],
family = sl_cup_1$family) * coef_1[i]
}
}
# calcolo le predizioni del training set dei modelli con pesi non nulli del SL2
p2_tot_training = replicate(length(train_output_1_cup[-sl_cup_2$validRows[j][[1]]]), 0)
for (i in 1:length(sl_cup_2$cvFitLibrary[[j]])) {
if (coef_2[i] > 0) {
p1_tot_training = p1_tot_training +
predict(sl_cup_2$cvFitLibrary[[j]][[i]], train_input_cup[-sl_cup_2$validRows[j][[1]],],
family = sl_cup_2$family) * coef_2[i]
}
}
# calcolo MEE per il primo fold e aggiungo il valore al vettore dei MEE
training_mee = training_mee + mean_euclidean_error(p1_tot_training, train_output_1_cup[-sl_cup_1$validRows[j][[1]]],
p2_tot_training, train_output_2_cup[-sl_cup_2$validRows[j][[1]]])
}
training_mee
### calcoliamo il MEE del training e della validation per la cross validation del SL
### training MEE
training_mean_euclidean_error_v2 = function(sl_cup_1,sl_cup_2){
training_mee = 0 # vettore in cui salvo i MEE calcolati in ogni fold
coef_1 = unname(sl_cup_1$coef) # prendo il vettori dei pesi del SL1
#name_1 = names(sl_cup_1$coef) # salvo il nome dei modelli, non lo uso
#name_1 = name_1[coef_1!=0] # salvo il nome dei modelli con peso non nullo, non lo uso
coef_2 = unname(sl_cup_2$coef) # prendo il vettori dei pesi del SL2
for(j in 1:length(sl_cup_1$cvFitLibrary)) { #stesso valore di sl_cup_2$cvFitLibrary
# calcolo le predizioni del training set dei modelli con pesi non nulli del SL1
p1_tot_training = replicate(length(train_output_1_cup[-sl_cup_1$validRows[j][[1]]]), 0)
for (i in 1:length(sl_cup_1$cvFitLibrary[[j]])) {
if (coef_1[i] > 0) {
p1_tot_training = p1_tot_training +
predict(sl_cup_1$cvFitLibrary[[j]][[i]], train_input_cup[-sl_cup_1$validRows[j][[1]],],
family = sl_cup_1$family) * coef_1[i]
}
}
# calcolo le predizioni del training set dei modelli con pesi non nulli del SL2
p2_tot_training = replicate(length(train_output_1_cup[-sl_cup_2$validRows[j][[1]]]), 0)
for (i in 1:length(sl_cup_2$cvFitLibrary[[j]])) {
if (coef_2[i] > 0) {
p1_tot_training = p1_tot_training +
predict(sl_cup_2$cvFitLibrary[[j]][[i]], train_input_cup[-sl_cup_2$validRows[j][[1]],],
family = sl_cup_2$family) * coef_2[i]
}
}
# calcolo MEE per il primo fold e aggiungo il valore al vettore dei MEE
training_mee = training_mee + mean_euclidean_error(p1_tot_training, train_output_1_cup[-sl_cup_1$validRows[j][[1]]],
p2_tot_training, train_output_2_cup[-sl_cup_2$validRows[j][[1]]])
print(training_mee)
}
training_mee/sl_cup_1$cvControl$V
#restituisco la media del MEE
return(training_mee/sl_cup_1$cvControl$V)
}
# MEE sul training set
training_mean_euclidean_error_v2(sl_cup_1,sl_cup_2)
p1_tot_training[1]
p1_tot_training[2]
train_output_1_cup[-sl_cup_1$validRows[1][[1]]]
j
train_output_1_cup[-sl_cup_1$validRows[10][[1]]][1]
p1_tot_training[1]
p1_tot_training[2]
train_output_1_cup[-sl_cup_1$validRows[10][[1]]][2]
train_output_1_cup[-sl_cup_2$validRows[10][[1]]][1]
-sl_cup_2$validRows[10]
sl_cup_2$validRows[10]
sl_cup_2$validRows[10]$`10`
sl_cup_2$validRows[10][[1]]
(train_output_1_cup[-sl_cup_2$validRows[10][[1]]])[1]
(train_output_1_cup[-sl_cup_2$validRows[10][[1]]])
p1_tot_training
### calcoliamo il MEE del training e della validation per la cross validation del SL
### training MEE
training_mean_euclidean_error_v2 = function(sl_cup_1,sl_cup_2){
training_mee = 0 # vettore in cui salvo i MEE calcolati in ogni fold
coef_1 = unname(sl_cup_1$coef) # prendo il vettori dei pesi del SL1
#name_1 = names(sl_cup_1$coef) # salvo il nome dei modelli, non lo uso
#name_1 = name_1[coef_1!=0] # salvo il nome dei modelli con peso non nullo, non lo uso
coef_2 = unname(sl_cup_2$coef) # prendo il vettori dei pesi del SL2
for(j in 1:length(sl_cup_1$cvFitLibrary)) { #stesso valore di sl_cup_2$cvFitLibrary
# calcolo le predizioni del training set dei modelli con pesi non nulli del SL1
p1_tot_training = replicate(length(train_output_1_cup[-sl_cup_1$validRows[j][[1]]]), 0)
for (i in 1:length(sl_cup_1$cvFitLibrary[[j]])) {
if (coef_1[i] > 0) {
p1_tot_training = p1_tot_training +
predict(sl_cup_1$cvFitLibrary[[j]][[i]], train_input_cup[-sl_cup_1$validRows[j][[1]],],
family = sl_cup_1$family) * coef_1[i]
}
}
# calcolo le predizioni del training set dei modelli con pesi non nulli del SL2
p2_tot_training = replicate(length(train_output_2_cup[-sl_cup_2$validRows[j][[1]]]), 0)
for (i in 1:length(sl_cup_2$cvFitLibrary[[j]])) {
if (coef_2[i] > 0) {
p2_tot_training = p2_tot_training +
predict(sl_cup_2$cvFitLibrary[[j]][[i]], train_input_cup[-sl_cup_2$validRows[j][[1]],],
family = sl_cup_2$family) * coef_2[i]
}
}
print()
# calcolo MEE per il primo fold e aggiungo il valore al vettore dei MEE
training_mee = training_mee + mean_euclidean_error(p1_tot_training, train_output_1_cup[-sl_cup_1$validRows[j][[1]]],
p2_tot_training, train_output_2_cup[-sl_cup_2$validRows[j][[1]]])
}
training_mee/sl_cup_1$cvControl$V
#restituisco la media del MEE
return(training_mee/sl_cup_1$cvControl$V)
}
### calcoliamo il MEE del training e della validation per la cross validation del SL
### training MEE
training_mean_euclidean_error_v2 = function(sl_cup_1,sl_cup_2){
training_mee = 0 # vettore in cui salvo i MEE calcolati in ogni fold
coef_1 = unname(sl_cup_1$coef) # prendo il vettori dei pesi del SL1
#name_1 = names(sl_cup_1$coef) # salvo il nome dei modelli, non lo uso
#name_1 = name_1[coef_1!=0] # salvo il nome dei modelli con peso non nullo, non lo uso
coef_2 = unname(sl_cup_2$coef) # prendo il vettori dei pesi del SL2
for(j in 1:length(sl_cup_1$cvFitLibrary)) { #stesso valore di sl_cup_2$cvFitLibrary
# calcolo le predizioni del training set dei modelli con pesi non nulli del SL1
p1_tot_training = replicate(length(train_output_1_cup[-sl_cup_1$validRows[j][[1]]]), 0)
for (i in 1:length(sl_cup_1$cvFitLibrary[[j]])) {
if (coef_1[i] > 0) {
p1_tot_training = p1_tot_training +
predict(sl_cup_1$cvFitLibrary[[j]][[i]], train_input_cup[-sl_cup_1$validRows[j][[1]],],
family = sl_cup_1$family) * coef_1[i]
}
}
# calcolo le predizioni del training set dei modelli con pesi non nulli del SL2
p2_tot_training = replicate(length(train_output_2_cup[-sl_cup_2$validRows[j][[1]]]), 0)
for (i in 1:length(sl_cup_2$cvFitLibrary[[j]])) {
if (coef_2[i] > 0) {
p2_tot_training = p2_tot_training +
predict(sl_cup_2$cvFitLibrary[[j]][[i]], train_input_cup[-sl_cup_2$validRows[j][[1]],],
family = sl_cup_2$family) * coef_2[i]
}
}
# calcolo MEE per il primo fold e aggiungo il valore al vettore dei MEE
training_mee = training_mee + mean_euclidean_error(p1_tot_training, train_output_1_cup[-sl_cup_1$validRows[j][[1]]],
p2_tot_training, train_output_2_cup[-sl_cup_2$validRows[j][[1]]])
}
training_mee/sl_cup_1$cvControl$V
#restituisco la media del MEE
return(training_mee/sl_cup_1$cvControl$V)
}
# MEE sul training set
training_mean_euclidean_error_v2(sl_cup_1,sl_cup_2)
### validation MEE
### stesse operazione del training MEE, cambiano solo le righe.
### in questo caso prendo le righe del validation set per ogni corrispettivo fold
validation_mean_euclidean_error = function(sl_cup_1,sl_cup_2){
validation_mee=0
#1
# calcolo predizioni primo SL
coef_1 = unname(sl_cup_1$coef)
#name_1 = names(sl_cup_2$coef)
#name_1 = name_1[coef_1!=0]
coef_2 = unname(sl_cup_2$coef)
for(j in 1:length(sl_cup_1$cvFitLibrary)) { #stesso valore di sl_cup_2$cvFitLibrary
p1_tot_validation = replicate(length(train_output_1_cup[sl_cup_1$validRows[j][[1]]]), 0)
for (i in 1:length(sl_cup_1$cvFitLibrary[[j]])) {
if (coef_1[i] > 0) {
p1_tot_validation = p1_tot_validation +
predict(sl_cup_1$cvFitLibrary[[j]][[i]], train_input_cup[sl_cup_1$validRows[j][[1]],],
family = sl_cup_1$family) * coef_1[i]
}
}
p2_tot_validation = replicate(length(train_output_2_cup[sl_cup_2$validRows[j][[1]]]), 0)
for (i in 1:length(sl_cup_2$cvFitLibrary[[j]])) {
if (coef_2[i] > 0) {
p2_tot_validation = p2_tot_validation +
predict(sl_cup_2$cvFitLibrary[[j]][[i]], train_input_cup[sl_cup_2$validRows[j][[1]],],
family = sl_cup_2$family) * coef_2[i]
}
}
validation_mee = validation_mee + mean_euclidean_error(p1_tot_validation, train_output_1_cup[sl_cup_1$validRows[j]],
p2_tot_validation, train_output_2_cup[sl_cup_2$validRows[j]])
}
return(validation_mee/sl_cup_1$cvControl$V)
}
# MEE sul training set
training_mean_euclidean_error_v2(sl_cup_1,sl_cup_2)
# MEE sul validation set
validation_mean_euclidean_error(sl_cup_1,sl_cup_2)
### validation MEE
### stesse operazione del training MEE, cambiano solo le righe.
### in questo caso prendo le righe del validation set per ogni corrispettivo fold
validation_mean_euclidean_error = function(sl_cup_1,sl_cup_2){
validation_mee=0
#1
# calcolo predizioni primo SL
coef_1 = unname(sl_cup_1$coef)
#name_1 = names(sl_cup_2$coef)
#name_1 = name_1[coef_1!=0]
coef_2 = unname(sl_cup_2$coef)
for(j in 1:length(sl_cup_1$cvFitLibrary)) { #stesso valore di sl_cup_2$cvFitLibrary
p1_tot_validation = replicate(length(train_output_1_cup[sl_cup_1$validRows[j][[1]]]), 0)
for (i in 1:length(sl_cup_1$cvFitLibrary[[j]])) {
if (coef_1[i] > 0) {
p1_tot_validation = p1_tot_validation +
predict(sl_cup_1$cvFitLibrary[[j]][[i]], train_input_cup[sl_cup_1$validRows[j][[1]],],
family = sl_cup_1$family) * coef_1[i]
}
}
p2_tot_validation = replicate(length(train_output_2_cup[sl_cup_2$validRows[j][[1]]]), 0)
for (i in 1:length(sl_cup_2$cvFitLibrary[[j]])) {
if (coef_2[i] > 0) {
p2_tot_validation = p2_tot_validation +
predict(sl_cup_2$cvFitLibrary[[j]][[i]], train_input_cup[sl_cup_2$validRows[j][[1]],],
family = sl_cup_2$family) * coef_2[i]
}
}
validation_mee = validation_mee + mean_euclidean_error(p1_tot_validation, train_output_1_cup[sl_cup_1$validRows[j][[1]]],
p2_tot_validation, train_output_2_cup[sl_cup_2$validRows[j][[1]]])
}
return(validation_mee/sl_cup_1$cvControl$V)
}
# MEE sul validation set
validation_mean_euclidean_error(sl_cup_1,sl_cup_2)
# modelli per ridge e lasso
tune_glmenet_cup = list(alpha = c(0,1),nlambda = c(100, 500, 50), useMin = c(TRUE,FALSE))
learner_glmnet_cup = create.Learner("SL.glmnet", tune = tune_glmenet_cup, detailed_names = TRUE,
name_prefix = "glmnet" )
#input1
set.seed(12)
sl_cup_1 <- SuperLearner(Y = train_output_1_cup, X = train_input_cup,family = gaussian(),
SL.library = c(learner_ranger_cup$names ,learner_svm_rbf_cup$names, learner_glmnet_cup$names),
verbose = TRUE, cvControl = list(10, FALSE), control = list(TRUE, TRUE))
sl_cup_1
set.seed(12)
sl_cup_2 <- SuperLearner(Y = train_output_2_cup, X = train_input_cup, family = gaussian(),
SL.library = c(learner_ranger_cup$names ,learner_svm_rbf_cup$names, learner_glmnet_cup$names),
verbose = TRUE, cvControl = list(10, FALSE), control = list(TRUE, TRUE))
sl_cup_2
### previsioni TEST SET, non necessario se passiamo a Superlearner newX
pred_cup_1 = predict.SuperLearner(object = sl_cup_1, newdata = test_input_cup, onlySL = TRUE)
pred_cup_2 = predict.SuperLearner(object = sl_cup_2, newdata = test_input_cup, onlySL = TRUE)
###
mae1 = MAE(pred_cup_1$pred, test_output_1_cup)
mae2 = MAE(pred_cup_2$pred, test_output_2_cup)
accuracy1 = 100 - (mae1 / abs(mean(test_output_1_cup))*100)
accuracy2 = 100 - (mae2 / abs(mean(test_output_2_cup))*100)
accuracy1
accuracy2
# MSE sul test
mse1 = MSE(pred_cup_1$pred, test_output_1_cup)
mse1
mse2 = MSE(pred_cup_2$pred, test_output_2_cup)
mse2
# MEE sul training set
training_mean_euclidean_error_v2(sl_cup_1,sl_cup_2)
# MEE sul validation set
validation_mean_euclidean_error(sl_cup_1,sl_cup_2)
# MEE sul test set
mean_euclidean_error(pred_cup_1$pred,test_output_1_cup,pred_cup_2$pred,test_output_2_cup)
